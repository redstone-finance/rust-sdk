[package]
name = "redstone"
version = "2.0.2"
edition = "2021"
authors = ["RedStone <https://redstone.finance>"]
description = "A Rust implementation of deserializing&decrypting RedStone payload"

[features]
default = ["std", "default-crypto"]

std = [
    "primitive-types/std",
    "hex?/std",
    "k256?/std",
    "getrandom/std",
    "sha3?/std",
]

# default crypto implementations
default-crypto = [
    "sha3", "k256"
]

# An extension for Radix network
radix = ["scrypto"]

# An extension setting usage on casper network.
casper = ["casper-types", "default-crypto"]
casper-test = ["casper", "casper-contract/test-support"]

# An extension for debug-printing of messages.
print_debug = []

# A variant of decrypting the message-signers using secp256k1 library. Cheaper in runtime.
crypto_secp256k1 = ["secp256k1/recovery", "secp256k1/lowmemory", "secp256k1/alloc"]

# A variant of decrypting the message-signers using k256 library. Cheaper during contract deployment.
crypto_k256 = ["k256/alloc", "k256/sha256", "k256/ecdsa"]

# A variant of decrypting the message-signers using Solana library.
solana = ["anchor-lang"]

# A set of helpers for testing & offline usage.
helpers = ["hex/serde", "hex/alloc"]

[dependencies]
casper-contract = { version = "^4.0.0", default-features = false, features = [], optional = true }
casper-types = { version = "^4.0.2", default-features = false, features = [], optional = true }
scrypto = { version = "^1.3.0", optional = true }
sha3 = { version = "^0.10.8", default-features = false, features = ["asm"], optional = true }
k256 = { version = "^0.13.4", default-features = false, features = ["ecdsa"], optional = true }
secp256k1 = { version = "^0.29.1", default-features = false, features = [], optional = true }
hex = { version = "^0.4.3", default-features = false, features = [], optional = true }
primitive-types = { version = "^0.13.1", default-features = false }
anchor-lang = { version = "0.30.1", optional = true, default-features = false }
derive-getters = "0.5.0"

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "^0.2.15", default-features = false, features = ["js"] }

[dev-dependencies]
criterion = { version = "0.5.1", default-features = false }
itertools = { version = "^0.13.0" }
rand = "0.8.5"

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = { version = "^0.3.45" }

[[bench]]
name = "benchmarks"
harness = false
